1:1-1:1::Date.$trModule :: "GHC.Types.Module"
9:1-9:19::Date.getCurrentTimeText :: "(GHC.Types.IO [GHC.Types.Char])"
9:22-9:61::lq_anf$##7205759403792801944 :: "Data.Time.Clock.Internal.UTCTime.UTCTime -> [GHC.Types.Char]"
9:33-9:50::Data.Time.Format.Locale.defaultTimeLocale :: "{v : Data.Time.Format.Locale.TimeLocale | v == defaultTimeLocale}"
9:51-9:61::Date.dateFormat :: "{v : [GHC.Types.Char] | len v >= 0\n                        && v == dateFormat}"
9:66-9:80::Data.Time.Clock.POSIX.getCurrentTime :: "{v : (GHC.Types.IO Data.Time.Clock.Internal.UTCTime.UTCTime) | v == getCurrentTime}"
12:1-12:9::Date.readDate :: "Data.Text.Internal.Text -> (GHC.Maybe.Maybe Data.Time.Clock.Internal.UTCTime.UTCTime)"
12:13-12:58::lq_anf$##7205759403792801943 :: "[GHC.Types.Char] -> (GHC.Maybe.Maybe Data.Time.Clock.Internal.UTCTime.UTCTime)"
12:24-12:29::GHC.Types.False :: "{v : GHC.Types.Bool | not v\n                      && v == False}"
12:30-12:47::Data.Time.Format.Locale.defaultTimeLocale :: "{v : Data.Time.Format.Locale.TimeLocale | v == defaultTimeLocale}"
12:48-12:58::Date.dateFormat :: "{v : [GHC.Types.Char] | len v >= 0\n                        && v == dateFormat}"
12:61-12:69::Data.Text.Show.unpack :: "x1:Data.Text.Internal.Text -> {v : [GHC.Types.Char] | len v == tlen x1}"
15:1-15:11::Date.dateFormat :: "[GHC.Types.Char]"
15:32-15:46::lq_anf$##7205759403792801942 :: "{v : (GHC.Maybe.Maybe [GHC.Types.Char]) | isJust v <=> true}"
15:38-15:45::lq_anf$##7205759403792801941 :: "[GHC.Types.Char]"
18:1-18:21::Date.shortPrettyPrintTime :: "forall a .\n(Data.Time.Format.FormatTime<[]> a) =>\na -> [GHC.Types.Char]"
18:35-18:52::Data.Time.Format.Locale.defaultTimeLocale :: "{v : Data.Time.Format.Locale.TimeLocale | v == defaultTimeLocale}"
18:53-18:64::lq_anf$##7205759403792801946 :: "[GHC.Types.Char]"