(set-option :auto-config false)
(set-option :model true)
(set-option :model.partial false)

(set-option :smt.mbqi false)

(define-sort Str () Int)
(declare-fun strLen (Str) Int)
(declare-fun subString (Str Int Int) Str)
(declare-fun concatString (Str Str) Str)
(define-sort Elt () Int)
(define-sort LSet () (Array Elt Bool))
(define-fun smt_set_emp () LSet ((as const LSet) false))
(define-fun smt_set_mem ((x Elt) (s LSet)) Bool (select s x))
(define-fun smt_set_add ((s LSet) (x Elt)) LSet (store s x true))
(define-fun smt_set_cup ((s1 LSet) (s2 LSet)) LSet ((_ map or) s1 s2))
(define-fun smt_set_cap ((s1 LSet) (s2 LSet)) LSet ((_ map and) s1 s2))
(define-fun smt_set_com ((s LSet)) LSet ((_ map not) s))
(define-fun smt_set_dif ((s1 LSet) (s2 LSet)) LSet (smt_set_cap s1 (smt_set_com s2)))
(define-fun smt_set_sub ((s1 LSet) (s2 LSet)) Bool (= smt_set_emp (smt_set_dif s1 s2)))
(define-sort Map () (Array Elt Elt))
(define-fun smt_map_sel ((m Map) (k Elt)) Elt (select m k))
(define-fun smt_map_sto ((m Map) (k Elt) (v Elt)) Map (store m k v))
(define-fun smt_map_cup ((m1 Map) (m2 Map)) Map ((_ map (+ (Elt Elt) Elt)) m1 m2))
(define-fun smt_map_def ((v Elt)) Map ((as const (Map)) v))
(define-fun bool_to_int ((b Bool)) Int (ite b 1 0))
(define-fun Z3_OP_MUL ((x Int) (y Int)) Int (* x y))
(define-fun Z3_OP_DIV ((x Int) (y Int)) Int (div x y))
(declare-fun GHC.Base.id () Int)
(declare-fun cast_as_int () Int)
(declare-fun VV$35$$35$1386 () Int)
(declare-fun Data.Text.replicate () Int)
(declare-fun lq_tmp$36$x$35$$35$902 () Int)
(declare-fun lq_tmp$36$x$35$$35$1028 () Int)
(declare-fun GHC.List.init () Int)
(declare-fun Data.Text.zipWith () Int)
(declare-fun Data.Time.LocalTime.Internal.TimeOfDay.TimeOfDay () Int)
(declare-fun Data.Text.all () Int)
(declare-fun addrLen () Int)
(declare-fun Data.Time.LocalTime.Internal.LocalTime.LocalTime () Int)
(declare-fun papp5 () Int)
(declare-fun GHC.List.iterate () Int)
(declare-fun x_Tuple21 () Int)
(declare-fun Data.Time.LocalTime.Internal.ZonedTime.ZonedTime () Int)
(declare-fun Data.Text.cons () Int)
(declare-fun Data.Time.Clock.Internal.UTCTime.UTCTime () Int)
(declare-fun GHC.Classes.$61$$61$ () Int)
(declare-fun GHC.Types.C$35$ () Int)
(declare-fun GHC.List.drop () Int)
(declare-fun VV$35$$35$1196 () Int)
(declare-fun lq_tmp$36$x$35$$35$1089 () Int)
(declare-fun Data.Text.Show.singleton () Int)
(declare-fun Data.Foldable.length () Int)
(declare-fun x_Tuple33 () Int)
(declare-fun Data.Text.split () Int)
(declare-fun GHC.Types.LT () Int)
(declare-fun Data.Text.unsnoc () Int)
(declare-fun Data.Text.last () Int)
(declare-fun Data.Text.scanl1 () Int)
(declare-fun GHC.List.replicate () Int)
(declare-fun GHC.List.zipWith () Int)
(declare-fun Data.Text.intercalate () Int)
(declare-fun Data.Text.foldr1 () Int)
(declare-fun GHC.Classes.$62$$61$ () Int)
(declare-fun GHC.Num.fromInteger () Int)
(declare-fun papp3 () Int)
(declare-fun Data.Text.break () Int)
(declare-fun GHC.List.span () Int)
(declare-fun stringlen () Int)
(declare-fun GHC.Classes.$62$ () Int)
(declare-fun lit$36$$37$H$58$$37$M () Str)
(declare-fun VV$35$$35$1175 () Int)
(declare-fun Data.Text.group () Int)
(declare-fun GHC.Types.False () Bool)
(declare-fun GHC.List.scanr1 () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792801950$35$$35$d2aG () Int)
(declare-fun Data.Text.Show.unpack () Int)
(declare-fun Data.Text.splitAt () Int)
(declare-fun lq_tmp$36$x$35$$35$894 () Int)
(declare-fun Data.Text.mapAccumR () Int)
(declare-fun lq_tmp$36$x$35$$35$775 () Int)
(declare-fun VV$35$$35$1209 () Int)
(declare-fun GHC.Types.$58$ () Int)
(declare-fun Data.Text.filter () Int)
(declare-fun GHC.List.scanl () Int)
(declare-fun Data.Text.maximum () Int)
(declare-fun GHC.Tuple.$40$$44$$44$$41$ () Int)
(declare-fun papp4 () Int)
(declare-fun GHC.Types.Module () Int)
(declare-fun GHC.List.zip () Int)
(declare-fun lq_tmp$36$x$35$$35$802 () Int)
(declare-fun GHC.Tuple.$40$$41$ () Int)
(declare-fun GHC.Types.I$35$ () Int)
(declare-fun Data.Text.tail () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792801943$35$$35$d2az () Int)
(declare-fun GHC.CString.unpackCString$35$ () Int)
(declare-fun Data.Text.concatMap () Int)
(declare-fun VV$35$$35$1265 () Int)
(declare-fun GHC.List.dropWhile () Int)
(declare-fun Data.Time.Calendar.Days.ModifiedJulianDay () Int)
(declare-fun GHC.Real.C$58$Fractional () Int)
(declare-fun autolen () Int)
(declare-fun GHC.Integer.Type.$36$WJn$35$ () Int)
(declare-fun GHC.Real.$94$ () Int)
(declare-fun GHC.Base.$36$fMonadMaybe () Int)
(declare-fun Data.Text.find () Int)
(declare-fun head () Int)
(declare-fun Data.Text.intersperse () Int)
(declare-fun tlen () Int)
(declare-fun lq_tmp$36$x$35$$35$1036 () Int)
(declare-fun Data.Text.dropWhile () Int)
(declare-fun GHC.Integer.Type.Jn$35$ () Int)
(declare-fun Data.Text.any () Int)
(declare-fun GHC.Classes.compare () Int)
(declare-fun Data.Text.unfoldrN () Int)
(declare-fun papp2 () Int)
(declare-fun Data.Text.index () Int)
(declare-fun Data.Time.Format.$36$fFormatTimeUTCTime () Int)
(declare-fun GHC.Stack.Types.EmptyCallStack () Int)
(declare-fun Data.Text.null () Int)
(declare-fun lq_tmp$36$x$35$$35$988 () Int)
(declare-fun GHC.List.reverse () Int)
(declare-fun GHC.Integer.Type.$36$WJp$35$ () Int)
(declare-fun VV$35$$35$1171 () Int)
(declare-fun Data.Fixed.MkFixed () Int)
(declare-fun VV$35$$35$1315 () Int)
(declare-fun lit$36$main () Str)
(declare-fun GHC.List.filter () Int)
(declare-fun lq_tmp$36$x$35$$35$966 () Int)
(declare-fun fromJust () Int)
(declare-fun GHC.List.cycle () Int)
(declare-fun GHC.List.$33$$33$ () Int)
(declare-fun GHC.List.tail () Int)
(declare-fun papp7 () Int)
(declare-fun GHC.Classes.$47$$61$ () Int)
(declare-fun Data.Text.groupBy () Int)
(declare-fun Data.Text.concat () Int)
(declare-fun GHC.List.break () Int)
(declare-fun GHC.Types.True () Bool)
(declare-fun lit$36$Date () Str)
(declare-fun GHC.Types.$91$$93$ () Int)
(declare-fun GHC.List.splitAt () Int)
(declare-fun Data.Text.isSuffixOf () Int)
(declare-fun Data.Text.Internal.empty () Int)
(declare-fun GHC.Base.$43$$43$ () Int)
(declare-fun GHC.Real.$58$$37$ () Int)
(declare-fun GHC.Tuple.$40$$44$$41$ () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792801944$35$$35$d2aA () Int)
(declare-fun VV$35$$35$1347 () Int)
(declare-fun Data.Text.Internal.Text () Int)
(declare-fun GHC.Classes.$38$$38$ () Int)
(declare-fun Data.Text.drop () Int)
(declare-fun Data.Text.mapAccumL () Int)
(declare-fun Data.Text.pack () Int)
(declare-fun Data.Time.LocalTime.Internal.TimeZone.TimeZone () Int)
(declare-fun GHC.Types.GT () Int)
(declare-fun GHC.Classes.C$58$IP () Int)
(declare-fun GHC.Classes.$124$$124$ () Int)
(declare-fun Data.Text.snoc () Int)
(declare-fun Data.Either.Left () Int)
(declare-fun GHC.List.last () Int)
(declare-fun Date.readDate () Int)
(declare-fun lq_tmp$36$x$35$$35$928 () Int)
(declare-fun VV$35$$35$1261 () Int)
(declare-fun GHC.Integer.Type.S$35$ () Int)
(declare-fun GHC.List.scanl1 () Int)
(declare-fun Data.Text.inits () Int)
(declare-fun Data.Either.Right () Int)
(declare-fun Data.Text.init () Int)
(declare-fun Data.Text.uncons () Int)
(declare-fun GHC.Num.$45$ () Int)
(declare-fun len () Int)
(declare-fun Data.Text.partition () Int)
(declare-fun papp6 () Int)
(declare-fun lq_tmp$36$x$35$$35$1054 () Int)
(declare-fun GHC.Base.. () Int)
(declare-fun x_Tuple22 () Int)
(declare-fun VV$35$$35$1218 () Int)
(declare-fun Data.Time.Clock.POSIX.getCurrentTime () Int)
(declare-fun GHC.Real.$36$W$58$$37$ () Int)
(declare-fun VV$35$$35$1319 () Int)
(declare-fun Data.Time.Clock.Internal.DiffTime.MkDiffTime () Int)
(declare-fun Date.shortPrettyPrintTime () Int)
(declare-fun GHC.Base.$36$fFunctorIO () Int)
(declare-fun isJust () Int)
(declare-fun Data.Time.Clock.Internal.NominalDiffTime.MkNominalDiffTime () Int)
(declare-fun GHC.List.takeWhile () Int)
(declare-fun lq_tmp$36$x$35$$35$872 () Int)
(declare-fun GHC.Types.TrNameD () Int)
(declare-fun Data.Text.Internal.$36$WText () Int)
(declare-fun Date.getCurrentTimeText () Int)
(declare-fun Data.Text.head () Int)
(declare-fun x_Tuple31 () Int)
(declare-fun lq_tmp$36$x$35$$35$831 () Int)
(declare-fun GHC.Integer.Type.Jp$35$ () Int)
(declare-fun Data.Text.reverse () Int)
(declare-fun lq_tmp$36$x$35$$35$956 () Int)
(declare-fun GHC.IO.Exception.IOError () Int)
(declare-fun VV$35$$35$1242 () Int)
(declare-fun GHC.List.take () Int)
(declare-fun VV$35$$35$1343 () Int)
(declare-fun GHC.Stack.Types.PushCallStack () Int)
(declare-fun GHC.Classes.$60$$61$ () Int)
(declare-fun VV$35$$35$1419 () Int)
(declare-fun GHC.Types.TrNameS () Int)
(declare-fun GHC.Enum.C$58$Bounded () Int)
(declare-fun GHC.Base.map () Int)
(declare-fun GHC.Base.$36$ () Int)
(declare-fun papp1 () Int)
(declare-fun Data.Text.copy () Int)
(declare-fun GHC.Classes.max () Int)
(declare-fun lq_tmp$36$x$35$$35$1053 () Int)
(declare-fun Data.Text.scanr () Int)
(declare-fun GHC.Classes.$60$ () Int)
(declare-fun tail () Int)
(declare-fun VV$35$$35$1382 () Int)
(declare-fun GHC.Stack.Types.FreezeCallStack () Int)
(declare-fun Data.Time.Format.Locale.defaultTimeLocale () Int)
(declare-fun GHC.Num.$42$ () Int)
(declare-fun lit$36$$37$a$44$$32$$37$b$32$$37$d () Str)
(declare-fun VV$35$$35$1192 () Int)
(declare-fun Data.Time.Format.Locale.TimeLocale () Int)
(declare-fun Data.Time.Clock.Internal.UniversalTime.ModJulianDate () Int)
(declare-fun Data.Time.Format.Locale.iso8601DateFormat () Int)
(declare-fun GHC.Maybe.Nothing () Int)
(declare-fun Data.Text.append () Int)
(declare-fun GHC.Types.EQ () Int)
(declare-fun Data.Text.minimum () Int)
(declare-fun GHC.List.scanr () Int)
(declare-fun Data.Text.take () Int)
(declare-fun GHC.Num.negate () Int)
(declare-fun lq_tmp$36$x$35$$35$1101 () Int)
(declare-fun Data.Time.Format.Parse.parseTimeM () Int)
(declare-fun VV$35$$35$1205 () Int)
(declare-fun Data.Text.tails () Int)
(declare-fun GHC.Real.fromIntegral () Int)
(declare-fun GHC.Maybe.Just () Int)
(declare-fun Data.Text.zip () Int)
(declare-fun GHC.Classes.min () Int)
(declare-fun GHC.List.head () Int)
(declare-fun Data.Text.findIndex () Int)
(declare-fun Data.Text.count () Int)
(declare-fun Data.Text.isPrefixOf () Int)
(declare-fun Data.Time.Format.Parse.$36$fParseTimeUTCTime () Int)
(declare-fun Data.Time.Format.formatTime () Int)
(declare-fun Data.Text.scanl () Int)
(declare-fun x_Tuple32 () Int)
(declare-fun Data.Text.isInfixOf () Int)
(declare-fun Data.Text.foldl1$39$ () Int)
(declare-fun lq_tmp$36$x$35$$35$810 () Int)
(declare-fun Data.Text.transpose () Int)
(declare-fun GHC.List.repeat () Int)
(declare-fun Data.Text.scanr1 () Int)
(declare-fun GHC.Classes.not () Int)
(declare-fun VV$35$$35$1415 () Int)
(declare-fun Data.Text.foldl1 () Int)
(declare-fun GHC.Num.$43$ () Int)
(declare-fun Data.Text.span () Int)
(declare-fun Data.Tuple.fst () Int)
(declare-fun Data.Functor.$60$$36$$62$ () Int)
(declare-fun Data.Text.length () Int)
(declare-fun fix$36$$36$dFormatTime_a22y () Int)
(declare-fun VV$35$$35$1132 () Int)
(declare-fun GHC.Real.C$58$Integral () Int)
(declare-fun lq_anf$36$$35$$35$7205759403792801948$35$$35$d2aE () Int)
(declare-fun GHC.Err.error () Int)
(declare-fun snd () Int)
(declare-fun Data.Text.takeWhile () Int)
(declare-fun fst () Int)
(declare-fun Data.Tuple.snd () Int)
(declare-fun Data.Text.map () Int)
(declare-fun apply$35$$35$13 (Int (_ BitVec 32)) Bool)
(declare-fun apply$35$$35$9 (Int Str) Bool)
(declare-fun apply$35$$35$6 (Int Bool) Str)
(declare-fun apply$35$$35$11 (Int Str) (_ BitVec 32))
(declare-fun apply$35$$35$15 (Int (_ BitVec 32)) (_ BitVec 32))
(declare-fun apply$35$$35$0 (Int Int) Int)
(declare-fun apply$35$$35$8 (Int Str) Int)
(declare-fun apply$35$$35$1 (Int Int) Bool)
(declare-fun apply$35$$35$7 (Int Bool) (_ BitVec 32))
(declare-fun apply$35$$35$14 (Int (_ BitVec 32)) Str)
(declare-fun apply$35$$35$10 (Int Str) Str)
(declare-fun apply$35$$35$5 (Int Bool) Bool)
(declare-fun apply$35$$35$2 (Int Int) Str)
(declare-fun apply$35$$35$12 (Int (_ BitVec 32)) Int)
(declare-fun apply$35$$35$3 (Int Int) (_ BitVec 32))
(declare-fun apply$35$$35$4 (Int Bool) Int)
(declare-fun coerce$35$$35$13 ((_ BitVec 32)) Bool)
(declare-fun coerce$35$$35$9 (Str) Bool)
(declare-fun coerce$35$$35$6 (Bool) Str)
(declare-fun coerce$35$$35$11 (Str) (_ BitVec 32))
(declare-fun coerce$35$$35$15 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun coerce$35$$35$0 (Int) Int)
(declare-fun coerce$35$$35$8 (Str) Int)
(declare-fun coerce$35$$35$1 (Int) Bool)
(declare-fun coerce$35$$35$7 (Bool) (_ BitVec 32))
(declare-fun coerce$35$$35$14 ((_ BitVec 32)) Str)
(declare-fun coerce$35$$35$10 (Str) Str)
(declare-fun coerce$35$$35$5 (Bool) Bool)
(declare-fun coerce$35$$35$2 (Int) Str)
(declare-fun coerce$35$$35$12 ((_ BitVec 32)) Int)
(declare-fun coerce$35$$35$3 (Int) (_ BitVec 32))
(declare-fun coerce$35$$35$4 (Bool) Int)
(declare-fun smt_lambda$35$$35$13 ((_ BitVec 32) Bool) Int)
(declare-fun smt_lambda$35$$35$9 (Str Bool) Int)
(declare-fun smt_lambda$35$$35$6 (Bool Str) Int)
(declare-fun smt_lambda$35$$35$11 (Str (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$15 ((_ BitVec 32) (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$0 (Int Int) Int)
(declare-fun smt_lambda$35$$35$8 (Str Int) Int)
(declare-fun smt_lambda$35$$35$1 (Int Bool) Int)
(declare-fun smt_lambda$35$$35$7 (Bool (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$14 ((_ BitVec 32) Str) Int)
(declare-fun smt_lambda$35$$35$10 (Str Str) Int)
(declare-fun smt_lambda$35$$35$5 (Bool Bool) Int)
(declare-fun smt_lambda$35$$35$2 (Int Str) Int)
(declare-fun smt_lambda$35$$35$12 ((_ BitVec 32) Int) Int)
(declare-fun smt_lambda$35$$35$3 (Int (_ BitVec 32)) Int)
(declare-fun smt_lambda$35$$35$4 (Bool Int) Int)
(declare-fun lam_arg$35$$35$1$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$2$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$3$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$4$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$5$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$6$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$7$35$$35$0 () Int)
(declare-fun lam_arg$35$$35$1$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$2$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$3$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$4$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$5$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$6$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$7$35$$35$8 () Str)
(declare-fun lam_arg$35$$35$1$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$2$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$3$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$4$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$5$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$6$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$7$35$$35$12 () (_ BitVec 32))
(declare-fun lam_arg$35$$35$1$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$2$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$3$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$4$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$5$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$6$35$$35$4 () Bool)
(declare-fun lam_arg$35$$35$7$35$$35$4 () Bool)

(assert (distinct lit$36$$37$a$44$$32$$37$b$32$$37$d lit$36$Date lit$36$main lit$36$$37$H$58$$37$M))

(assert (distinct GHC.Types.True GHC.Types.False))
(assert (distinct GHC.Types.EQ GHC.Types.GT GHC.Types.LT))
(assert (= (strLen lit$36$$37$H$58$$37$M) 5))
(assert (= (strLen lit$36$main) 4))
(assert (= (strLen lit$36$Date) 4))
(assert (= (strLen lit$36$$37$a$44$$32$$37$b$32$$37$d) 9))
(exit)
