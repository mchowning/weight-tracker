1:1-1:1::$trModule :: "GHC.Types.Module"
47:1-47:11::fromWeight :: "Main.Weight -> GHC.Types.Double"
50:1-50:5:::Main.main :: "(GHC.Types.IO ())"
51:3-51:12::blankLine :: "{v : (GHC.Types.IO ()) | v == blankLine}"
52:3-52:25::lq_anf$##7205759403792824705 :: "(GHC.Types.IO ())"
52:17-52:25::filename :: "{v : Filesystem.Path.Internal.FilePath | v == filename}"
54:3-54:15::savedWeights :: "[Main.Entry]"
54:19-54:39::lq_anf$##7205759403792824706 :: "[Turtle.Line.Line] -> [Main.Entry]"
54:28-54:39::lineToEntry :: "Turtle.Line.Line -> (GHC.Maybe.Maybe Main.Entry)"
54:44-54:76::lq_anf$##7205759403792824709 :: "(GHC.Types.IO [Turtle.Line.Line])"
54:49-54:65::lq_anf$##7205759403792824707 :: "(Turtle.Shell.Shell Turtle.Line.Line)"
54:56-54:64::filename :: "{v : Filesystem.Path.Internal.FilePath | v == filename}"
54:66-54:76::_ :: "forall a . (Control.Foldl.Fold a [a])"
55:3-55:35::lq_anf$##7205759403792824710 :: "(GHC.Types.IO ())"
55:23-55:35::savedWeights :: "{v : [Main.Entry] | len v >= 0\n                    && v == savedWeights}"
57:3-57:12::blankLine :: "{v : (GHC.Types.IO ()) | v == blankLine}"
58:7-58:25::allDaysWithWeights :: "[(Data.Time.Calendar.Days.Day, Main.Weight)]"
58:28-58:51::_ :: "[(Data.Time.Calendar.Days.Day, Main.Weight)]"
58:39-58:51::savedWeights :: "{v : [Main.Entry] | len v >= 0\n                    && v == savedWeights}"
59:3-59:89::_ :: "(GHC.Types.IO ())"
59:8-59:44::lq_anf$##7205759403792824717 :: "GHC.Types.Bool"
59:9-59:34::lq_anf$##7205759403792824711 :: "{v : GHC.Types.Int | v >= 0\n                     && v == len allDaysWithWeights}"
59:16-59:34::allDaysWithWeights :: "{v : [(Data.Time.Calendar.Days.Day, Main.Weight)] | len v >= 0\n                                                    && v == allDaysWithWeights}"
59:38-59:39::lq_anf$##7205759403792824713 :: "GHC.Types.Int"
59:42-59:43::lq_anf$##7205759403792824715 :: "GHC.Types.Int"
59:45-59:89::lq_anf$##7205759403792824720 :: "(GHC.Types.IO ())"
59:68-59:69::lq_anf$##7205759403792824719 :: "GHC.Types.Int"
59:70-59:88::allDaysWithWeights :: "{v : [(Data.Time.Calendar.Days.Day, Main.Weight)] | len v >= 0\n                                                    && v == allDaysWithWeights}"
60:9-60:17::filename :: "Filesystem.Path.Internal.FilePath"
60:20-60:62::lq_anf$##7205759403792824704 :: "[GHC.Types.Char]"
64:1-64:10::blankLine :: "(GHC.Types.IO ())"
64:22-64:24::_ :: "forall a <p :: a a -> Bool> .\n{v : [a]<\\x3 VV -> {VV : a<p x3> | true}> | len v == 0}"
67:1-67:14::saveWeightArg :: "Filesystem.Path.Internal.FilePath -> (GHC.Types.IO ())"
67:15-67:17::fp :: "Filesystem.Path.Internal.FilePath"
68:3-68:14::maybeWeight :: "(GHC.Maybe.Maybe Main.Weight)"
68:18-68:27::_ :: "{v : (GHC.Types.IO (GHC.Maybe.Maybe Main.Weight)) | v == parseArgs}"
69:3-69:52::lq_anf$##7205759403792824547 :: "(GHC.Types.IO ())"
69:13-69:52::lq_anf$##7205759403792824546 :: "(GHC.Maybe.Maybe (GHC.Types.IO ()))"
69:14-69:35::lq_anf$##7205759403792824545 :: "Main.Weight -> (GHC.Types.IO ())"
69:33-69:35::fp :: "{v : Filesystem.Path.Internal.FilePath | v == fp}"
69:40-69:51::maybeWeight :: "{v : (GHC.Maybe.Maybe Main.Weight) | v == maybeWeight}"
70:7-70:22::showSavedWeight :: "Main.Weight -> (GHC.Types.IO ())"
70:23-70:24::w :: "Main.Weight"
70:27-70:92::lq_anf$##7205759403792824557 :: "(GHC.Types.IO ())"
70:36-70:92::lq_anf$##7205759403792824556 :: "[GHC.Types.Char]"
70:37-70:49::lq_anf$##7205759403792824550 :: "[GHC.Types.Char]"
70:53-70:65::lq_anf$##7205759403792824552 :: "[GHC.Types.Char]"
70:64-70:65::w :: "{v : Main.Weight | v == w}"
70:69-70:91::lq_anf$##7205759403792824554 :: "[GHC.Types.Char]"
70:96-70:105::blankLine :: "{v : (GHC.Types.IO ()) | v == blankLine}"
71:3-71:46::_ :: "(GHC.Types.IO ())"
71:13-71:46::lq_anf$##7205759403792824558 :: "(GHC.Maybe.Maybe (GHC.Types.IO ()))"
71:14-71:29::showSavedWeight :: "Main.Weight -> (GHC.Types.IO ())"
71:34-71:45::maybeWeight :: "{v : (GHC.Maybe.Maybe Main.Weight) | v == maybeWeight}"
74:1-74:19::updateSavedWeights :: "Filesystem.Path.Internal.FilePath -> Main.Weight -> (GHC.Types.IO ())"
74:20-74:24::path :: "Filesystem.Path.Internal.FilePath"
74:25-74:31::weight :: "Main.Weight"
75:7-75:11::orig :: "(Turtle.Shell.Shell Turtle.Line.Line)"
75:17-75:27::_ :: "(Turtle.Shell.Shell Turtle.Line.Line)"
75:23-75:27::path :: "{v : Filesystem.Path.Internal.FilePath | v == path}"
76:7-76:14::updated :: "(Turtle.Shell.Shell Turtle.Line.Line)"
76:17-76:21::orig :: "{v : (Turtle.Shell.Shell Turtle.Line.Line) | v == orig}"
76:26-76:57::lq_anf$##7205759403792824536 :: "(Turtle.Shell.Shell Turtle.Line.Line)"
76:33-76:57::lq_anf$##7205759403792824535 :: "(GHC.Types.IO Turtle.Line.Line)"
76:50-76:56::weight :: "{v : Main.Weight | v == weight}"
77:3-77:40::lq_anf$##7205759403792824540 :: "(GHC.Types.IO ())"
77:10-77:32::lq_anf$##7205759403792824539 :: "Filesystem.Path.Internal.FilePath"
77:33-77:40::updated :: "{v : (Turtle.Shell.Shell Turtle.Line.Line) | v == updated}"
78:3-78:33::lq_anf$##7205759403792824544 :: "(GHC.Types.IO ())"
78:6-78:28::lq_anf$##7205759403792824543 :: "Filesystem.Path.Internal.FilePath"
78:29-78:33::path :: "{v : Filesystem.Path.Internal.FilePath | v == path}"
81:1-81:16::createEntryLine :: "Main.Weight -> (GHC.Types.IO Turtle.Line.Line)"
81:17-81:18::w :: "Main.Weight"
82:3-82:6::now :: "[GHC.Types.Char]"
82:10-82:28::_ :: "{v : (GHC.Types.IO [GHC.Types.Char]) | v == getCurrentTimeText}"
83:14-83:17::now :: "{v : [GHC.Types.Char] | len v >= 0\n                        && v == now}"
83:21-83:24::lq_anf$##7205759403792824531 :: "[GHC.Types.Char]"
83:28-83:40::lq_anf$##7205759403792824532 :: "[GHC.Types.Char]"
83:39-83:40::w :: "{v : Main.Weight | v == w}"
84:3-84:9::_ :: "forall a . a -> (GHC.Types.IO a)"
84:12-84:28::unsafeTextToLine :: "Data.Text.Internal.Text -> Turtle.Line.Line"
84:31-84:37::pack :: "x1:[GHC.Types.Char] -> {v : Data.Text.Internal.Text | tlen v == len x1}"
87:1-87:10::parseArgs :: "(GHC.Types.IO (GHC.Maybe.Maybe Main.Weight))"
87:13-87:50::$fMonadIOIO :: "{v : (Control.Monad.IO.Class.MonadIO GHC.Types.IO) | v == $fMonadIOIO}"
87:21-87:43::lq_anf$##7205759403792824523 :: "Turtle.Options.Description"
87:44-87:50::parser :: "{v : (Options.Applicative.Types.Parser (GHC.Maybe.Maybe Main.Weight)) | v == parser}"
90:3-90:9::parser :: "(Options.Applicative.Types.Parser (GHC.Maybe.Maybe Main.Weight))"
91:9-91:26::parserMaybeDouble :: "(Options.Applicative.Types.Parser (GHC.Maybe.Maybe GHC.Types.Double))"
92:13-92:86::_ :: "(Options.Applicative.Types.Parser (GHC.Maybe.Maybe GHC.Types.Double))"
92:22-92:86::lq_anf$##7205759403792824518 :: "(Options.Applicative.Types.Parser GHC.Types.Double)"
92:33-92:41::lq_anf$##7205759403792824514 :: "Turtle.Options.ArgName"
92:42-92:85::lq_anf$##7205759403792824517 :: "(Data.Optional.Optional Turtle.Options.HelpMessage)"
93:10-93:14::_ :: "forall a b .\n(a -> b) -> (Options.Applicative.Types.Parser a) -> (Options.Applicative.Types.Parser b)"
93:17-93:21::_ :: "forall a b . (a -> b) -> (GHC.Maybe.Maybe a) -> (GHC.Maybe.Maybe b)"
93:23-93:29::Weight :: "GHC.Types.Double -> Main.Weight"
93:30-93:47::parserMaybeDouble :: "{v : (Options.Applicative.Types.Parser (GHC.Maybe.Maybe GHC.Types.Double)) | v == parserMaybeDouble}"
96:1-96:11::showWeight :: "Main.Weight -> [GHC.Types.Char]"
106:1-106:9::entryDay :: "Main.Entry -> Data.Time.Calendar.Days.Day"
106:12-106:19::utctDay :: "Data.Time.Clock.Internal.UTCTime.UTCTime -> Data.Time.Calendar.Days.Day"
106:22-106:31::entryDate :: "Main.Entry -> Data.Time.Clock.Internal.UTCTime.UTCTime"
109:1-109:17::prettyPrintEntry :: "Main.Entry -> [GHC.Types.Char]"
110:3-110:28::lq_anf$##7205759403792824562 :: "[GHC.Types.Char]"
110:24-110:28::time :: "{v : Data.Time.Clock.Internal.UTCTime.UTCTime | v == time}"
110:32-110:36::lq_anf$##7205759403792824565 :: "[GHC.Types.Char]"
110:40-110:46::lq_anf$##7205759403792824567 :: "[GHC.Types.Char]"
113:1-113:20::displayFromLastWeek :: "[Main.Entry] -> (GHC.Types.IO ())"
113:21-113:23::es :: "[Main.Entry]"
114:7-114:14::heading :: "[GHC.Types.Char]"
114:17-114:45::lq_anf$##7205759403792824582 :: "{v : GHC.Prim.Addr# | v == \"Entries from the past week\"}"
115:3-115:8::today :: "Data.Time.Calendar.Days.Day"
115:12-115:19::utctDay :: "Data.Time.Clock.Internal.UTCTime.UTCTime -> Data.Time.Calendar.Days.Day"
115:24-115:38::getCurrentTime :: "{v : (GHC.Types.IO Data.Time.Clock.Internal.UTCTime.UTCTime) | v == getCurrentTime}"
116:7-116:16::last8Days :: "[Main.Entry]"
116:19-116:43::_ :: "[Main.Entry]"
116:33-116:34::lq_anf$##7205759403792824583 :: "{v : GHC.Integer.Type.Integer | v == 8}"
116:35-116:40::today :: "{v : Data.Time.Calendar.Days.Day | v == today}"
116:41-116:43::es :: "{v : [Main.Entry] | len v >= 0\n                    && v == es}"
117:3-117:45::displayEntries :: "[GHC.Types.Char] -> [Main.Entry] -> (GHC.Types.IO ())"
117:18-117:25::heading :: "{v : [GHC.Types.Char] | len v >= 0\n                        && v == heading}"
117:26-117:45::lq_anf$##7205759403792824584 :: "{v : [Main.Entry] | len v == len last8Days}"
117:35-117:44::last8Days :: "{v : [Main.Entry] | len v >= 0\n                    && v == last8Days}"
120:1-120:14::fromLastNDays :: "GHC.Integer.Type.Integer -> Data.Time.Calendar.Days.Day -> [Main.Entry] -> [Main.Entry]"
120:15-120:16::n :: "GHC.Integer.Type.Integer"
120:17-120:20::day :: "Data.Time.Calendar.Days.Day"
121:10-121:54::lq_anf$##7205759403792824573 :: "Main.Entry -> GHC.Types.Bool"
121:11-121:16::_ :: "GHC.Types.Bool"
121:14-121:15::n :: "{v : GHC.Integer.Type.Integer | v == n}"
121:19-121:31::lq_anf$##7205759403792824570 :: "Data.Time.Calendar.Days.Day -> GHC.Integer.Type.Integer"
121:28-121:31::day :: "{v : Data.Time.Calendar.Days.Day | v == day}"
121:34-121:41::utctDay :: "Data.Time.Clock.Internal.UTCTime.UTCTime -> Data.Time.Calendar.Days.Day"
121:44-121:53::entryDate :: "Main.Entry -> Data.Time.Clock.Internal.UTCTime.UTCTime"
124:1-124:15::displayEntries :: "[GHC.Types.Char] -> [Main.Entry] -> (GHC.Types.IO ())"
124:16-124:23::heading :: "[GHC.Types.Char]"
124:24-124:26::es :: "[Main.Entry]"
125:3-125:23::lq_anf$##7205759403792824579 :: "(GHC.Types.IO ())"
125:16-125:23::heading :: "{v : [GHC.Types.Char] | len v >= 0\n                        && v == heading}"
126:3-126:41::lq_anf$##7205759403792824581 :: "(GHC.Types.IO ())"
126:9-126:11::es :: "{v : [Main.Entry] | len v >= 0\n                    && v == es}"
126:12-126:41::lq_anf$##7205759403792824580 :: "Main.Entry -> (GHC.Types.IO ())"
126:13-126:21::putStrLn :: "[GHC.Types.Char] -> (GHC.Types.IO ())"
126:24-126:40::prettyPrintEntry :: "Main.Entry -> [GHC.Types.Char]"
129:1-129:13::printHeading :: "[GHC.Types.Char] -> (GHC.Types.IO ())"
129:14-129:21::heading :: "[GHC.Types.Char]"
130:3-130:19::lq_anf$##7205759403792824574 :: "(GHC.Types.IO ())"
130:12-130:19::heading :: "{v : [GHC.Types.Char] | len v >= 0\n                        && v == heading}"
131:3-131:44::lq_anf$##7205759403792824578 :: "(GHC.Types.IO ())"
131:12-131:44::lq_anf$##7205759403792824577 :: "[GHC.Types.Char]"
131:23-131:39::lq_anf$##7205759403792824575 :: "{v : GHC.Types.Int | v >= 0\n                     && v == len heading}"
131:31-131:38::heading :: "{v : [GHC.Types.Char] | len v >= 0\n                        && v == heading}"
131:40-131:43::lq_anf$##7205759403792824576 :: "{v : GHC.Types.Char | v == (lit \"61\" Char)}"
134:1-134:13::displayLastN :: "GHC.Types.Int -> [Main.Entry] -> (GHC.Types.IO ())"
134:14-134:15::n :: "GHC.Types.Int"
134:16-134:18::es :: "[Main.Entry]"
135:7-135:14::heading :: "[GHC.Types.Char]"
135:17-135:24::lq_anf$##7205759403792824588 :: "[GHC.Types.Char]"
135:28-135:34::lq_anf$##7205759403792824590 :: "[GHC.Types.Char]"
135:33-135:34::n :: "{v : GHC.Types.Int | v == n}"
135:38-135:48::lq_anf$##7205759403792824592 :: "[GHC.Types.Char]"
136:7-136:12::lastN :: "{v : [Main.Entry] | not (n >= 0) => len v == 0}"
136:15-136:34::_ :: "{v : [Main.Entry] | not (n >= 0) => len v == 0}"
136:20-136:21::n :: "{v : GHC.Types.Int | v == n}"
136:22-136:34::lq_anf$##7205759403792824585 :: "{v : [Main.Entry] | len v == len es}"
136:31-136:33::es :: "{v : [Main.Entry] | len v >= 0\n                    && v == es}"
137:21-137:28::heading :: "{v : [GHC.Types.Char] | len v >= 0\n                        && v == heading}"
137:29-137:34::lastN :: "{v : [Main.Entry] | (not (n >= 0) => len v == 0)\n                    && len v >= 0\n                    && v == lastN}"
147:1-147:11::filledDays :: "[Main.Entry] -> [(Data.Time.Calendar.Days.Day, Main.Weight)]"
147:12-147:19::entries :: "[Main.Entry]"
148:7-148:20::earliestEntry :: "Main.Entry"
148:23-148:63::_ :: "Main.Entry"
148:35-148:55::lq_anf$##7205759403792824683 :: "Main.Entry -> Main.Entry -> GHC.Types.Ordering"
148:46-148:54::entryDay :: "Main.Entry -> Data.Time.Calendar.Days.Day"
148:56-148:63::entries :: "{v : [Main.Entry] | len v >= 0\n                    && v == entries}"
149:7-149:18::latestEntry :: "Main.Entry"
149:23-149:63::_ :: "Main.Entry"
149:35-149:55::lq_anf$##7205759403792824682 :: "Main.Entry -> Main.Entry -> GHC.Types.Ordering"
149:46-149:54::entryDay :: "Main.Entry -> Data.Time.Calendar.Days.Day"
149:56-149:63::entries :: "{v : [Main.Entry] | len v >= 0\n                    && v == entries}"
150:7-150:14::allDays :: "{v : [Data.Time.Calendar.Days.Day] | len v > 0}"
150:23-150:60::_ :: "{v : [Data.Time.Calendar.Days.Day] | len v > 0}"
150:35-150:48::earliestEntry :: "{v : Main.Entry | v == earliestEntry}"
150:49-150:60::latestEntry :: "{v : Main.Entry | v == latestEntry}"
151:7-151:17::filledDays :: "{v : [(Data.Time.Calendar.Days.Day, (GHC.Maybe.Maybe Main.Weight))] | len v == len allDays}"
151:23-151:52::_ :: "{v : [(Data.Time.Calendar.Days.Day, (GHC.Maybe.Maybe Main.Weight))] | len v == len allDays}"
151:37-151:44::entries :: "{v : [Main.Entry] | len v >= 0\n                    && v == entries}"
151:45-151:52::allDays :: "{v : [Data.Time.Calendar.Days.Day] | len v > 0\n                                     && len v >= 0\n                                     && v == allDays}"
152:7-152:15::leftFold :: "{v : [(Data.Time.Calendar.Days.Day, (GHC.Maybe.Maybe Main.Weight))] | len v == len filledDays}"
152:23-152:51::_ :: "{v : [(Data.Time.Calendar.Days.Day, (GHC.Maybe.Maybe Main.Weight))] | len v == len filledDays}"
152:30-152:40::leftFolder :: "(Data.Time.Calendar.Days.Day, (GHC.Maybe.Maybe Main.Weight)) -> (Data.Time.Calendar.Days.Day, (GHC.Maybe.Maybe Main.Weight)) -> (Data.Time.Calendar.Days.Day, (GHC.Maybe.Maybe Main.Weight))"
152:41-152:51::filledDays :: "{v : [(Data.Time.Calendar.Days.Day, (GHC.Maybe.Maybe Main.Weight))] | len v == len allDays\n                                                                      && len v >= 0\n                                                                      && v == filledDays}"
153:7-153:16::rightFold :: "{v : [(Data.Time.Calendar.Days.Day, (GHC.Maybe.Maybe Main.Weight))] | len v == len filledDays}"
153:23-153:58::_ :: "{v : [(Data.Time.Calendar.Days.Day, (GHC.Maybe.Maybe Main.Weight))] | len v == len filledDays}"
153:30-153:47::lq_anf$##7205759403792824684 :: "(Data.Time.Calendar.Days.Day, (GHC.Maybe.Maybe Main.Weight)) -> (Data.Time.Calendar.Days.Day, (GHC.Maybe.Maybe Main.Weight)) -> (Data.Time.Calendar.Days.Day, (GHC.Maybe.Maybe Main.Weight))"
153:36-153:46::leftFolder :: "(Data.Time.Calendar.Days.Day, (GHC.Maybe.Maybe Main.Weight)) -> (Data.Time.Calendar.Days.Day, (GHC.Maybe.Maybe Main.Weight)) -> (Data.Time.Calendar.Days.Day, (GHC.Maybe.Maybe Main.Weight))"
153:48-153:58::filledDays :: "{v : [(Data.Time.Calendar.Days.Day, (GHC.Maybe.Maybe Main.Weight))] | len v == len allDays\n                                                                      && len v >= 0\n                                                                      && v == filledDays}"
154:16-154:51::lq_anf$##7205759403792824685 :: "{v : [(GHC.Maybe.Maybe (Data.Time.Calendar.Days.Day, Main.Weight))] | len v <= len leftFold\n                                                                      && len v <= len rightFold}"
154:25-154:31::zipper :: "(Data.Time.Calendar.Days.Day, (GHC.Maybe.Maybe Main.Weight)) -> (Data.Time.Calendar.Days.Day, (GHC.Maybe.Maybe Main.Weight)) -> (GHC.Maybe.Maybe (Data.Time.Calendar.Days.Day, Main.Weight))"
154:32-154:40::leftFold :: "{v : [(Data.Time.Calendar.Days.Day, (GHC.Maybe.Maybe Main.Weight))] | len v == len filledDays\n                                                                      && len v >= 0\n                                                                      && v == leftFold}"
154:41-154:50::rightFold :: "{v : [(Data.Time.Calendar.Days.Day, (GHC.Maybe.Maybe Main.Weight))] | len v == len filledDays\n                                                                      && len v >= 0\n                                                                      && v == rightFold}"
158:3-158:13::leftFolder :: "(Data.Time.Calendar.Days.Day, (GHC.Maybe.Maybe Main.Weight)) -> (Data.Time.Calendar.Days.Day, (GHC.Maybe.Maybe Main.Weight)) -> (Data.Time.Calendar.Days.Day, (GHC.Maybe.Maybe Main.Weight))"
158:21-158:22::a :: "(Data.Time.Calendar.Days.Day, (GHC.Maybe.Maybe Main.Weight))"
158:38-158:39::lq_anf$##7205759403792824675 :: "{v : (Data.Time.Calendar.Days.Day, (GHC.Maybe.Maybe Main.Weight)) | v == a}"
159:38-159:44::(,) :: "forall a b <p2 :: a b -> Bool> .\nx1:a -> x2:{VV : b<p2 x1> | true} -> {v : (a, b)<\\x5 VV -> {VV : b<p2 x5> | true}> | x_Tuple22 v == x2\n                                                                                     && x_Tuple21 v == x1\n                                                                                     && snd v == x2\n                                                                                     && fst v == x1}"
159:39-159:40::d :: "{v : Data.Time.Calendar.Days.Day | v == d}"
159:42-159:43::w :: "{v : (GHC.Maybe.Maybe Main.Weight) | v == w}"
162:3-162:9::zipper :: "(Data.Time.Calendar.Days.Day, (GHC.Maybe.Maybe Main.Weight)) -> (Data.Time.Calendar.Days.Day, (GHC.Maybe.Maybe Main.Weight)) -> (GHC.Maybe.Maybe (Data.Time.Calendar.Days.Day, Main.Weight))"
162:38-162:45::_ :: "forall a . {v : (GHC.Maybe.Maybe a) | isJust v <=> false}"
163:38-163:45::_ :: "forall a . {v : (GHC.Maybe.Maybe a) | isJust v <=> false}"
165:5-165:73::lq_anf$##7205759403792824663 :: "{v : GHC.Types.Bool | v <=> d1 /= d2}"
165:8-165:10::d1 :: "{v : Data.Time.Calendar.Days.Day | v == d1}"
165:14-165:16::d2 :: "{v : Data.Time.Calendar.Days.Day | v == d2}"
165:22-165:29::_ :: "forall a . {v : (GHC.Maybe.Maybe a) | isJust v <=> false}"
165:35-165:39::_ :: "forall a .\nx1:a -> {v : (GHC.Maybe.Maybe a) | fromJust v == x1\n                                   && (isJust v <=> true)}"
165:42-165:48::_ :: "{v : (Data.Time.Calendar.Days.Day, Main.Weight) | x_Tuple21 v == d1\n                                                  && fst v == d1}"
165:43-165:45::d1 :: "{v : Data.Time.Calendar.Days.Day | v == d1}"
165:51-165:57::Weight :: "GHC.Types.Double -> Main.Weight"
165:60-165:69::lq_anf$##7205759403792824670 :: "GHC.Types.Double"
165:72-165:73::lq_anf$##7205759403792824671 :: "{v : GHC.Types.Double | v == 2.0}"
168:1-168:10::precision :: "GHC.Types.Int -> GHC.Types.Double -> GHC.Types.Double"
168:11-168:12::i :: "GHC.Types.Int"
168:13-168:14::n :: "GHC.Types.Double"
168:17-168:47::lq_anf$##7205759403792824598 :: "GHC.Types.Double"
168:29-168:47::lq_anf$##7205759403792824597 :: "GHC.Integer.Type.Integer"
168:36-168:46::lq_anf$##7205759403792824596 :: "GHC.Types.Double"
168:37-168:38::n :: "{v : GHC.Types.Double | v == n}"
168:41-168:43::lq_anf$##7205759403792824594 :: "{v : GHC.Types.Double | v == 10.0}"
168:44-168:45::i :: "{v : GHC.Types.Int | v == i}"
168:50-168:52::lq_anf$##7205759403792824599 :: "{v : GHC.Types.Double | v == 10.0}"
168:53-168:54::i :: "{v : GHC.Types.Int | v == i}"
172:1-172:8::average :: "{ds : [GHC.Types.Double] | len ds > 0} -> GHC.Types.Double"
172:9-172:11::ds :: "{ds : [GHC.Types.Double] | len ds > 0}"
172:14-172:25::lq_anf$##7205759403792824603 :: "GHC.Types.Double -> GHC.Types.Double"
172:24-172:25::lq_anf$##7205759403792824602 :: "GHC.Types.Int"
172:28-172:56::lq_anf$##7205759403792824605 :: "GHC.Types.Double -> GHC.Types.Double"
172:31-172:55::_ :: "GHC.Types.Double"
172:44-172:55::lq_anf$##7205759403792824604 :: "{v : GHC.Types.Int | v >= 0\n                     && v == len ds}"
172:52-172:54::ds :: "{v : [GHC.Types.Double] | len v > 0\n                          && len v >= 0\n                          && v == ds}"
172:59-172:62::lq_anf$##7205759403792824606 :: "[GHC.Types.Double] -> GHC.Types.Double"
172:65-172:67::ds :: "{v : [GHC.Types.Double] | len v > 0\n                          && len v >= 0\n                          && v == ds}"
178:1-178:13::dayWeightMap :: "[Main.Entry] -> (Data.HashMap.Base.HashMap GHC.Types.Int Main.Weight)"
178:14-178:16::es :: "[Main.Entry]"
179:7-179:10::tup :: "[(GHC.Types.Int, Main.Weight)]"
179:13-179:78::lq_anf$##7205759403792824646 :: "Main.Entry -> (GHC.Types.Int, Main.Weight)"
179:18-179:75::(,) :: "forall a b <p2 :: a b -> Bool> .\nx1:a -> x2:{VV : b<p2 x1> | true} -> {v : (a, b)<\\x5 VV -> {VV : b<p2 x5> | true}> | x_Tuple22 v == x2\n                                                                                     && x_Tuple21 v == x1\n                                                                                     && snd v == x2\n                                                                                     && fst v == x1}"
179:20-179:21::e :: "Main.Entry"
179:26-179:58::lq_anf$##7205759403792824644 :: "GHC.Types.Int"
179:35-179:58::lq_anf$##7205759403792824643 :: "Data.Time.Calendar.Days.Day"
179:44-179:57::lq_anf$##7205759403792824642 :: "Data.Time.Clock.Internal.UTCTime.UTCTime"
179:55-179:56::e :: "{v : Main.Entry | v == e}"
179:60-179:73::lq_anf$##7205759403792824645 :: "Main.Weight"
179:72-179:73::e :: "{v : Main.Entry | v == e}"
179:76-179:78::es :: "{v : [Main.Entry] | len v >= 0\n                    && v == es}"
180:19-180:22::tup :: "{v : [(GHC.Types.Int, Main.Weight)] | len v >= 0\n                                      && v == tup}"
193:1-193:14::fillKnownDays :: "[Main.Entry] -> x2:[Data.Time.Calendar.Days.Day] -> {rs : [(Data.Time.Calendar.Days.Day, (GHC.Maybe.Maybe Main.Weight))] | len rs == len x2}"
193:15-193:17::es :: "[Main.Entry]"
193:18-193:20::ds :: "[Data.Time.Calendar.Days.Day]"
194:7-194:15::entryMap :: "(Data.HashMap.Base.HashMap GHC.Types.Int Main.Weight)"
194:21-194:36::_ :: "(Data.HashMap.Base.HashMap GHC.Types.Int Main.Weight)"
194:34-194:36::es :: "{v : [Main.Entry] | len v >= 0\n                    && v == es}"
195:6-195:28::lq_anf$##7205759403792824649 :: "Data.Time.Calendar.Days.Day -> (Data.Time.Calendar.Days.Day, (GHC.Maybe.Maybe Main.Weight))"
195:20-195:28::entryMap :: "{v : (Data.HashMap.Base.HashMap GHC.Types.Int Main.Weight) | v == entryMap}"
195:33-195:35::ds :: "{v : [Data.Time.Calendar.Days.Day] | len v >= 0\n                                     && v == ds}"
198:3-198:16::dayWithWeight :: "(Data.HashMap.Base.HashMap GHC.Types.Int Main.Weight) -> Data.Time.Calendar.Days.Day -> (Data.Time.Calendar.Days.Day, (GHC.Maybe.Maybe Main.Weight))"
198:17-198:21::dMap :: "(Data.HashMap.Base.HashMap GHC.Types.Int Main.Weight)"
198:22-198:23::d :: "Data.Time.Calendar.Days.Day"
198:26-198:58::(,) :: "forall a b <p2 :: a b -> Bool> .\nx1:a -> x2:{VV : b<p2 x1> | true} -> {v : (a, b)<\\x5 VV -> {VV : b<p2 x5> | true}> | x_Tuple22 v == x2\n                                                                                     && x_Tuple21 v == x1\n                                                                                     && snd v == x2\n                                                                                     && fst v == x1}"
198:27-198:28::d :: "{v : Data.Time.Calendar.Days.Day | v == d}"
198:30-198:57::lq_anf$##7205759403792824648 :: "(GHC.Maybe.Maybe Main.Weight)"
198:40-198:52::lq_anf$##7205759403792824647 :: "GHC.Types.Int"
198:50-198:51::d :: "{v : Data.Time.Calendar.Days.Day | v == d}"
198:53-198:57::dMap :: "{v : (Data.HashMap.Base.HashMap GHC.Types.Int Main.Weight) | v == dMap}"
205:1-205:22::displayMovingAverages :: "{weeks : GHC.Types.Int | weeks > 0} -> [(Data.Time.Calendar.Days.Day, Main.Weight)] -> (GHC.Types.IO ())"
205:23-205:28::weeks :: "{weeks : GHC.Types.Int | weeks > 0}"
205:29-205:31::es :: "[(Data.Time.Calendar.Days.Day, Main.Weight)]"
206:3-206:63::lq_anf$##7205759403792824629 :: "(GHC.Types.IO ())"
206:16-206:63::lq_anf$##7205759403792824628 :: "[GHC.Types.Char]"
206:17-206:28::lq_anf$##7205759403792824622 :: "[GHC.Types.Char]"
206:32-206:42::lq_anf$##7205759403792824624 :: "[GHC.Types.Char]"
206:37-206:42::weeks :: "{v : GHC.Types.Int | v > 0\n                     && v == weeks}"
206:46-206:62::lq_anf$##7205759403792824626 :: "[GHC.Types.Char]"
207:9-207:34::lq_anf$##7205759403792824630 :: "[(Data.Time.Calendar.Days.Day, Data.Time.Calendar.Days.Day, GHC.Types.Double)]"
207:25-207:30::weeks :: "{v : GHC.Types.Int | v > 0\n                     && v == weeks}"
207:31-207:33::es :: "{v : [(Data.Time.Calendar.Days.Day, Main.Weight)] | len v >= 0\n                                                    && v == es}"
208:5-208:60::putStrLn :: "[GHC.Types.Char] -> (GHC.Types.IO ())"
208:14-208:60::lq_anf$##7205759403792824639 :: "[GHC.Types.Char]"
208:15-208:39::lq_anf$##7205759403792824633 :: "[GHC.Types.Char]"
208:36-208:39::end :: "{v : Data.Time.Calendar.Days.Day | v == end}"
208:43-208:47::lq_anf$##7205759403792824636 :: "[GHC.Types.Char]"
208:51-208:59::lq_anf$##7205759403792824637 :: "[GHC.Types.Char]"
208:56-208:59::avg :: "{v : GHC.Types.Double | v == avg}"
222:1-222:15::movingAverages :: "x1:{n : GHC.Types.Int | n > 0} -> {ts : [(Data.Time.Calendar.Days.Day, Main.Weight)] | len ts >= x1 * 7} -> [(Data.Time.Calendar.Days.Day, Data.Time.Calendar.Days.Day, GHC.Types.Double)]"
222:16-222:17::n :: "{n : GHC.Types.Int | n > 0}"
222:18-222:20::es :: "{ts : [(Data.Time.Calendar.Days.Day, Main.Weight)] | len ts >= n * 7}"
223:7-223:11::week :: "GHC.Types.Int"
223:14-223:15::lq_anf$##7205759403792824617 :: "{v : GHC.Prim.Int# | v == 7}"
224:7-224:23::windowEveryNDays :: "{v : GHC.Types.Int | v == week}"
224:26-224:30::_ :: "{v : GHC.Types.Int | v == week}"
225:7-225:17::windowSize :: "{v : GHC.Types.Int | v == week * n}"
225:20-225:24::week :: "{v : GHC.Types.Int | v == week}"
225:27-225:28::n :: "{v : GHC.Types.Int | v > 0\n                     && v == n}"
226:7-226:14::windows :: "[[(Data.Time.Calendar.Days.Day, Main.Weight)]]"
226:17-226:63::_ :: "[[(Data.Time.Calendar.Days.Day, Main.Weight)]]"
226:25-226:63::lq_anf$##7205759403792824618 :: "[[(Data.Time.Calendar.Days.Day, Main.Weight)]]"
226:32-226:42::windowSize :: "{v : GHC.Types.Int | v == week * n\n                     && v == windowSize}"
226:43-226:59::windowEveryNDays :: "{v : GHC.Types.Int | v == week\n                     && v == windowEveryNDays}"
226:60-226:62::es :: "{v : [(Data.Time.Calendar.Days.Day, Main.Weight)] | len v >= n * 7\n                                                    && len v >= 0\n                                                    && v == es}"
227:7-227:19::windowResult :: "forall a .\n{VV : [(a, Main.Weight)] | (not (n >= 0) => len VV == 0)\n                           && len VV >= 0} -> (a, a, GHC.Types.Double)"
227:20-227:26::window :: "{VV : [(a, Main.Weight)] | (not (n >= 0) => len VV == 0)\n                           && len VV >= 0}"
227:29-227:106::(,,) :: "forall a b c <p3 :: b-> a c -> Bool, p2 :: a b -> Bool> .\nx1:a -> x2:{VV : b<p2 x1> | true} -> x3:{VV : c<p3 x2 x1> | true} -> {v : (a, b, c)<\\x8 VV -> {VV : b<p2 x8> | true}, \\x8 x8 VV -> {VV : c<p3 x8 x8> | true}> | x_Tuple33 v == x3\n                                                                                                                                                                && x_Tuple32 v == x2\n                                                                                                                                                                && x_Tuple31 v == x1}"
227:30-227:47::lq_anf$##7205759403792824610 :: "a"
227:34-227:47::lq_anf$##7205759403792824609 :: "{v : (a, Main.Weight) | v == head window}"
227:40-227:46::window :: "{v : [(a, Main.Weight)] | (not (n >= 0) => len v == 0)\n                          && len v >= 0\n                          && v == window}"
227:49-227:66::lq_anf$##7205759403792824612 :: "a"
227:53-227:66::lq_anf$##7205759403792824611 :: "(a, Main.Weight)"
227:59-227:65::window :: "{v : [(a, Main.Weight)] | (not (n >= 0) => len v == 0)\n                          && len v >= 0\n                          && v == window}"
227:68-227:105::lq_anf$##7205759403792824616 :: "GHC.Types.Double"
227:76-227:105::lq_anf$##7205759403792824615 :: "[GHC.Types.Double]"
227:77-227:87::fromWeight :: "Main.Weight -> GHC.Types.Double"
227:90-227:93::_ :: "forall a b . x1:(a, b) -> {VV : b | VV == snd x1}"
227:98-227:104::window :: "{v : [(a, Main.Weight)] | (not (n >= 0) => len v == 0)\n                          && len v >= 0\n                          && v == window}"
228:6-228:18::_ :: "forall a .\n{v : [(a, Main.Weight)] | (not (n >= 0) => len v == 0)\n                          && len v >= 0} -> (a, a, GHC.Types.Double)"
228:23-228:30::windows :: "{v : [[(Data.Time.Calendar.Days.Day, Main.Weight)]] | len v >= 0\n                                                      && v == windows}"
233:1-233:12::fillEntries :: "Main.Entry -> Main.Entry -> {ds : [Data.Time.Calendar.Days.Day] | len ds > 0}"
233:13-233:21::earliest :: "Main.Entry"
233:22-233:28::latest :: "Main.Entry"
234:7-234:18::earliestDay :: "Data.Time.Calendar.Days.Day"
234:21-234:49::_ :: "Data.Time.Calendar.Days.Day"
234:29-234:49::lq_anf$##7205759403792824651 :: "Data.Time.Clock.Internal.UTCTime.UTCTime"
234:40-234:48::earliest :: "{v : Main.Entry | v == earliest}"
235:7-235:14::lastDay :: "Data.Time.Calendar.Days.Day"
235:21-235:47::_ :: "Data.Time.Calendar.Days.Day"
235:29-235:47::lq_anf$##7205759403792824650 :: "Data.Time.Clock.Internal.UTCTime.UTCTime"
235:40-235:46::latest :: "{v : Main.Entry | v == latest}"
236:18-236:29::earliestDay :: "{v : Data.Time.Calendar.Days.Day | v == earliestDay}"
236:30-236:37::lastDay :: "{v : Data.Time.Calendar.Days.Day | v == lastDay}"
239:1-239:15::linesToEntries :: "(Turtle.Shell.Shell Turtle.Line.Line) -> (Turtle.Shell.Shell Main.Entry)"
239:16-239:22::sLines :: "(Turtle.Shell.Shell Turtle.Line.Line)"
240:3-240:9::mEntry :: "(GHC.Maybe.Maybe Main.Entry)"
240:13-240:24::lineToEntry :: "Turtle.Line.Line -> (GHC.Maybe.Maybe Main.Entry)"
240:29-240:35::sLines :: "{v : (Turtle.Shell.Shell Turtle.Line.Line) | v == sLines}"
241:3-241:28::lq_anf$##7205759403792824702 :: "Main.Entry -> (Turtle.Shell.Shell Main.Entry)"
241:9-241:14::_ :: "forall a . (Turtle.Shell.Shell a)"
241:15-241:21::_ :: "forall a . a -> (Turtle.Shell.Shell a)"
241:22-241:28::mEntry :: "{v : (GHC.Maybe.Maybe Main.Entry) | v == mEntry}"
246:1-246:12::lineToEntry :: "Turtle.Line.Line -> (GHC.Maybe.Maybe Main.Entry)"
246:13-246:14::l :: "Turtle.Line.Line"
247:7-247:11::text :: "Data.Text.Internal.Text"
247:14-247:26::_ :: "Data.Text.Internal.Text"
247:25-247:26::l :: "{v : Turtle.Line.Line | v == l}"
248:12-248:30::lq_anf$##7205759403792824692 :: "[Data.Text.Internal.Text]"
248:22-248:25::lq_anf$##7205759403792824691 :: "Data.Text.Internal.Text"
248:26-248:30::text :: "{v : Data.Text.Internal.Text | tlen v == stringlen v\n                               && 0 <= tlen v\n                               && v == text}"
249:27-249:32::Entry :: "Data.Time.Clock.Internal.UTCTime.UTCTime -> Main.Weight -> Main.Entry"
249:37-249:50::lq_anf$##7205759403792824696 :: "(GHC.Maybe.Maybe Data.Time.Clock.Internal.UTCTime.UTCTime)"
249:46-249:50::date :: "{v : Data.Text.Internal.Text | tlen v == stringlen v\n                               && 0 <= tlen v\n                               && v == date}"
249:55-249:72::lq_anf$##7205759403792824698 :: "(GHC.Maybe.Maybe Main.Weight)"
249:66-249:72::weight :: "{v : Data.Text.Internal.Text | tlen v == stringlen v\n                               && 0 <= tlen v\n                               && v == weight}"
250:27-250:34::_ :: "forall a . {v : (GHC.Maybe.Maybe a) | isJust v <=> false}"
253:3-253:13::readWeight :: "Data.Text.Internal.Text -> (GHC.Maybe.Maybe Main.Weight)"
253:16-253:27::lq_anf$##7205759403792824686 :: "(GHC.Maybe.Maybe GHC.Types.Double) -> (GHC.Maybe.Maybe Main.Weight)"
253:21-253:27::Weight :: "GHC.Types.Double -> Main.Weight"
253:30-253:39::lq_anf$##7205759403792824687 :: "[GHC.Types.Char] -> (GHC.Maybe.Maybe GHC.Types.Double)"
253:42-253:50::unpack :: "x1:Data.Text.Internal.Text -> {v : [GHC.Types.Char] | len v == tlen x1}"